import pyomo.environ as pyo


model = pyo.AbstractModel()

model.m = pyo.Param(within = pyo.NonNegativeIntegers)
model.n = pyo.Param(within = pyo.NonNegativeIntegers)

model.I = pyo.RangeSet(1, model.m)
model.J = pyo.RangeSet(1, model.n)

model.a = pyo.Param(model.I, model.J)
model.b = pyo.Param(model.I)
model.c = pyo.Param(model.J)

# Defining decision variable
model.x = pyo.Var(model.J, domain = pyo.NonNegativeReals)

# objective function
def obj_expression(m):
    return pyo.summation(m.c, m.x)

# constraints
def ax_constraint_rule(m, i):
    # defining a constraint equation for each i
    return sum(m.a[i, j] * m.x[j] for j in m.J) >= m.b[i]

# Defining objective function in the model
model.OBJ = pyo.Objective(rule=obj_expression)

# Defining constraints in the model: One constraint for each member of the set model.I
model.AxbConstraint = pyo.Constraint(model.I, rule=ax_constraint_rule)

# to solve the problem run in terminal: pyomo solve diet_problem_abstract_model.py diet_problem_data.dat  --solver=glpk

